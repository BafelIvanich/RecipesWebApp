@model RecipeSearchViewModel
@{
    ViewData["Title"] = "Search";
}

<h1>Поиск</h1>

<form asp-controller="Recipes" asp-action="Search" method="get" class="mb-4">
    <div class="mb-3">
        <label for="query" class="form-label">Название рецепта</label>
        <input type="text" id="query" name="query" class="form-control" value="" placeholder="Введите название рецепта" />
    </div>

    <!-- Remove the "Add Ingredient" button from your view -->
    <div class="mb-3">
        <label for="ingredientSearch">Добавьте ингредиенты</label>
        <div style="position: relative;">
            <input type="text" id="ingredientSearch" class="form-control"
                   placeholder="Поиск ингредиентов" autocomplete="off"
                   onkeydown="return handleEnter(event)" />
            <div id="ingredientDropdown" class="dropdown-menu"
                 style="display:none; width:100%; position:absolute; z-index:1000;"></div>
        </div>
        <ul id="IngredientList" class="list-group mt-2"></ul>
    </div>

    <div class="mb-3">
        <label for="cookingTIme" class="form-label">Время приготовления</label>
        <input type="number" id="cookingTime" name="cookingTime" class="form-control" value="" />
    </div>

    <button type="submit" class="btn btn-success">Поиск</button>
    <button type="button" class="btn btn-secondary ms-2">Filter</button>
    <button type="button" class="btn btn-secondary ms-2">Sort</button>
</form>

@section Scripts {
    <script>

        // Helper function to get existing ingredients PROPERLY
        function getExistingIngredients() {
            return Array.from(document.querySelectorAll('#IngredientList input[type="hidden"]'))
                .map(input => input.value.trim().toLowerCase());
        }

        // Updated selectIngredient handler
        function selectIngredient(event) {
            const target = event.target.closest('a'); // Handle nested elements
            if (!target) return;

            const ingredient = target.textContent.trim();
            addIngredientToList(ingredient);
            document.getElementById('ingredientSearch').value = '';
            document.getElementById('ingredientDropdown').style.display = 'none';
            event.preventDefault();
        }

        // Modified dropdown generation
        document.getElementById('ingredientSearch').addEventListener('input', async function(e) {
            const searchTerm = e.target.value.trim().toLocaleLowerCase('ru-RU');
            const dropdown = document.getElementById('ingredientDropdown');

            if (searchTerm.length > 1) {
                try {
                    const response = await fetch(`/Recipes/SearchIngredients?term=${encodeURIComponent(searchTerm)}`);
                    currentValidIngredients = await response.json();

                    const existing = getExistingIngredients();
                    const filtered = currentValidIngredients.filter(ing =>
                        !existing.includes(ing.trim().toLowerCase())
                    );

                    dropdown.innerHTML = filtered.map(ing =>
                        `<a href="#" class="dropdown-item d-block" onclick="selectIngredient(event)">${ing}</a>`
                    ).join('');

                    dropdown.style.display = filtered.length > 0 ? 'block' : 'none';
                } catch (error) {
                    console.error('Error:', error);
                    dropdown.style.display = 'none';
                }
            } else {
                dropdown.style.display = 'none';
                currentValidIngredients = [];
            }
        });

        // Updated addIngredientToList with proper duplicate check
        function addIngredientToList(ingredient) {
            const list = document.getElementById('IngredientList');
            const existing = getExistingIngredients();

            if (!existing.includes(ingredient.trim().toLowerCase())) {
                const li = document.createElement('li');
                li.className = 'list-group-item d-flex justify-content-between align-items-center';
                li.innerHTML = `
                    ${ingredient}
                    <input type="hidden" name="ingredients" value="${ingredient}" />
                    <button type="button" class="btn btn-sm btn-danger" onclick="this.parentElement.remove()">&times;</button>
                `;
                list.appendChild(li);
            }
        }

        function handleEnter(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                const input = document.getElementById('ingredientSearch');
                const value = input.value.trim();

                const exists = currentValidIngredients.some(ing =>
                    ing.toLowerCase() === value.toLowerCase()
                );

                if (!exists) {
                    alert('Пожалуйста, выберите ингредиент из списка');
                    input.value = '';
                    document.getElementById('ingredientDropdown').style.display = 'none';
                    return false;
                }

                const correctCaseIngredient = currentValidIngredients.find(
                    ing => ing.toLowerCase() === value.toLowerCase()
                );


                addIngredientToList(correctCaseIngredient);
                input.value = '';
                input.dispatchEvent(new Event('input'));
                return false;
            }
            return true;
        }
    </script>
}